#!/usr/bin/python
import os
from os import symlink
import magic
from mutagen.easyid3 import EasyID3
from mutagen.mp3 import MP3
from mutagen.mp3 import MPEGInfo
from mutagen.mp4 import MP4
from mutagen.oggvorbis import OggVorbis
from mutagen.flac import FLAC


#>>> import magic
#>>> m = magic.Magic()
#>>> m.from_file("testdata/test.pdf")
#'PDF document, version 1.2'
#>>> m.from_buffer(open("testdata/test.pdf").read(1024))
#'PDF document, version 1.2'

# For MIME types
#>>> mime = magic.Magic(mime=True)
#>>> mime.from_file("testdata/test.pdf")
#'application/pdf'

#ms = magic.open(magic.MAGIC_NONE)
#ms.load()
#ms = magic.Magic()
ms = magic.Magic(mime=True)

sourceDir = "music"
destDir = "best-quality"
if (sourceDir[-1] != '/'):
	sourceDir += '/'
if (destDir[-1] != '/'):
	destDir += '/'
sourceDirLen = len(sourceDir)

def mkdirhier(dir):
	try:
		os.makedirs(dir)
	except OSError, e:
		if e.errno != 17: raise e

def worse(list, idx1, idx2):
	"""return whichever is "worse" of these two, or -1 if they are incomparable"""
	audio1 = list[idx1];
	audio2 = list[idx2];
	if "artist" in audio1 and "title" in audio1 and \
		"artist" in audio2 and "title" in audio2 and \
		audio1["artist"] == audio2["artist"] and audio1["title"] == audio2["title"]:
		if audio1.__dict__['type'] == "flac":
			return idx2;
		elif audio2.__dict__['type'] == "flac":
			return idx1;
		elif audio1.__dict__['bitrate'] > audio2.__dict__['bitrate']:
			return idx2;
		elif audio2.__dict__['bitrate'] > audio1.__dict__['bitrate']:
			return idx1;
		elif audio1.__dict__['type'] == "ogg":
			return idx2;
		elif audio2.__dict__['type'] == "ogg":
			return idx1;
	return -1

def isSlash(c): 
	return c == "/"

def countSlashes(str):
	return len(filter(isSlash, str))

filesThisDir = []
thisDir = ""
for root, dirs, files in os.walk(sourceDir, topdown=False):
	if root != thisDir:
		if thisDir:
			print thisDir
			toRemove = []
			for i, audio in enumerate(filesThisDir):
				if i in toRemove:
					continue
				#~ print "   ", i, audio, audio.__dict__['type']
				remaining = filesThisDir[i+1:]
				for j, other in enumerate(remaining):
					#~ print "      ", j, other, other.__dict__['type']
					theWorse = worse(filesThisDir, i, j + i + 1);
					if theWorse >= 0:
						#~ print "         the worse:", theWorse
						if theWorse in toRemove:
							continue
						toRemove.append(theWorse)
						if theWorse == i:
							break
			toRemove.sort(reverse=True)
#			print toRemove
#			for i, audio in enumerate(filesThisDir):
#				print "   ", i, "\t", audio.__dict__['type'], "\t", audio.__dict__['filename']
			for i in toRemove:
#				print "         removing worse file: ", filesThisDir[i].__dict__['type'], filesThisDir[i].__dict__['path']
				if i >= len(filesThisDir):
					print "this is weird: can't remove", i, "from list of len", len(filesThisDir)
				else:
					del filesThisDir[i]
			subpath = thisDir[sourceDirLen:]
			for i, audio in enumerate(filesThisDir):
#				print "   ", i, audio, audio.__dict__['type']
				destPath = destDir + subpath + "/"
#				print "   ln ", destPath + audio.__dict__["filename"], " -> ", audio.__dict__['path']
				mkdirhier(destPath)
				symlink("../" * countSlashes(audio.__dict__['path']) + audio.__dict__['path'], destPath + audio.__dict__["filename"])
		filesThisDir = []
		thisDir = root

	for name in files:
		path = os.path.join(root, name)
		type = ms.from_file(path).lower()
#		print "file of type", type, ":", path
#		print root, " => ",  name
		try:
			if type.find("mp3") >= 0:
				audio = EasyID3(path)
	#			print audio.keys()
				mpinfo = MPEGInfo (open (path))
				audio.__dict__['type'] = "mp3"
				audio.__dict__['bitrate'] = mpinfo.bitrate
				audio.__dict__['path'] = path
				audio.__dict__['filename'] = name
	#			if "artist" in audio and "title" in audio:
	#				print "mp3", audio["artist"], audio["title"], mpinfo.bitrate
			elif type.find("ogg") >= 0:
				audio = OggVorbis(path)
				audio.__dict__['type'] = "ogg"
				audio.__dict__['bitrate'] = audio.info.bitrate
				audio.__dict__['path'] = path
				audio.__dict__['filename'] = name
	#			if "artist" in audio and "title" in audio:
	#				print "ogg", audio["artist"], audio["title"], audio.info.bitrate
			elif type.find("flac") >= 0:
				audio = FLAC(path)
				audio.__dict__['type'] = "flac"
	#			audio.__dict__['sample_rate'] = audio.info.sample_rate
				audio.__dict__['path'] = path
				audio.__dict__['filename'] = name
			elif type.find("aac") >= 0:
				audio = MP4(path)
				audio.__dict__['type'] = "mp4"
	#			audio.__dict__['sample_rate'] = audio.info.sample_rate
				audio.__dict__['path'] = path
				audio.__dict__['filename'] = name
			else: 
				continue
		except Exception, e:
			print path, "is not valid:", e
			continue;
		filesThisDir.append(audio)
